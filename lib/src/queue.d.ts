import { IReducer, IAction, ISubscriber, IQueue, IStateRecord } from "./types";
export declare const makeQueue: <T>(state: IStateRecord<T>, reducers: IReducer<T>[], subscribers?: ISubscriber<T>[]) => IQueue<T>;
export declare const queueGetReducersForAction: <T>(queue: IQueue<T>, action: IAction<T>) => IReducer<T>[];
export declare const queueGetSubscribersForAction: <T>(queue: IQueue<T>, action: IAction<T>) => ISubscriber<T>[];
export declare const queueNext: <T>(queue: IQueue<T>) => void;
export declare const queueGetState: <T>(queue: IQueue<T>) => IStateRecord<T>;
export declare const queueGetStateRoot: <T>(queue: IQueue<T>, root: string) => Partial<T>;
export declare const queueHandleAction: <T>(queue: IQueue<T>, action: IAction<T>) => void;
export declare const queueDispatch: <T>(queue: IQueue<T>, action: IAction<T>) => IAction<T>[];
export declare const queueSubscribe: <T>(queue: IQueue<T>, subscriber: ISubscriber<T>) => IAction<T>[];
